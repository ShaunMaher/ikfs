#!/usr/bin/env bash

# TODO: build depends only on amd64 and i386: makedumpfile

os_cpu="${os_cpu:-$(uname -p)}"
build_depends="equivs dkms wget kmod libelf-dev kernel-wedge rsync gawk debhelper git locales dh-systemd libnewt-dev libiberty-dev libdw-dev pkg-config libunwind8-dev liblzma-dev openssl libaudit-dev python-dev libudev-dev autoconf automake uuid-dev binutils-dev libnuma-dev xmlto docbook-utils ghostscript fig2dev bzip2 sharutils asciidoc python-sphinx python-sphinx-rtd-theme python3-distutils dh-autoreconf tzdata ${build_depends}"
script_dir=$(dirname $(readlink -f "${0}"))
kernel_git_branch="${kernel_git_branch:-master}"
kernel_src_dir=/usr/src/linux

source "${script_dir}/ikfs-common"

# Inherit the default functions and settings from debian
if [ -f "${script_dir}/ikfs-chroot-debian" ]; then
  source "${script_dir}/ikfs-chroot-debian"
fi

function download_kernel_source () {
  echo "Downloading Kernel Source from 'kernel.ubuntu.com/ubuntu/${os_name}-${kernel_codename}.git'"
  git clone --single-branch --branch "${kernel_git_branch}" --depth 5 \
    git://kernel.ubuntu.com/ubuntu/${os_name}-${kernel_codename}.git \
    ${kernel_src_dir} || return 1
  cd ${kernel_src_dir}

  # We need to collect some version information for later use (mainly in
  #  allowing patches to apply to any version)
  kernel_version=$(make kernelversion)
  kernel_version_major=$(echo ${kernel_version} | awk 'BEGIN{FS="."}{print $1}')
  kernel_version_minor=$(echo ${kernel_version} | awk 'BEGIN{FS="."}{print $2}')
  kernel_version_revision=$(echo ${kernel_version} | awk 'BEGIN{FS="."}{print $3}')
  echo "The kernel version of the downloaded source: '${kernel_version}'"

  abi_version=$(basename $(find ./debian.master/abi -maxdepth 1 -mindepth 1 -type d))
  echo "The abi version of the downloaded source: '${abi_version}'"

  zfs_version=$(
    wget -q -O- http://http.us.debian.org/debian/dists/experimental/contrib/source/Sources.xz | \
    xz -d | \
    awk '{ if (/^Package: zfs-linux/) { section=1 } else if (/^Package: /) {section=0}; if (section>0 && /^Version: /) {print $2}}' \
  )
  echo "The current experimental ZFS package in the Debian repository is version: '${zfs_version}'"
}

function build_extra_packages () {
  build_extra_package "zfs-linux" "experimental/contrib"
}

function build_extra_package () {
  local source_package_name="${1}"
  local source_package_repo="${2}"

  local src_dir="/usr/src/${source_package_name}"
  mkdir -p "${src_dir}"
  cd "${src_dir}"

  # Get the list of source packages from the upstream repository
  wget -q -O- "http://http.us.debian.org/debian/dists/${source_package_repo}/source/Sources.xz" | \
    xz -d >/tmp/Sources

  # Extract just the section of the Sources file that relates to the package
  #  we're dealing with
  cat /tmp/Sources | awk "{ if (/^Package: ${source_package_name}/) { section=1 } else if (/^Package: /) {section=0}; if (section>0) {print \$0}}" \
    >/tmp/Sources_${source_package_name}

  # Get the package version
  local package_version=$( \
    cat /tmp/Sources_${source_package_name} | awk '{if (/^Version: /) {print $2}}' \
  )
  echo "The current experimental ZFS package in the Debian repository is version: '${package_version}'"

  # Get the directory within the repository that we will need to download from
  local repo_directory=$( \
    cat /tmp/Sources_${source_package_name} | awk '{if (/^Directory: /) {print $2}}' \
  )

  # Get a list of files that relate to the package
  cat /tmp/Sources_${source_package_name} | awk "{ if (/^Files:/) { section=1 } else if (/^[[:alnum:]]/) {section=0}; if (section>0 && /^ /) {print \$0}}" \
    >/tmp/Files_${source_package_name}

  # Download the listed files and check their checksums
  readarray -t files </tmp/Files_${source_package_name}
  for file in "${files[@]}"; do
    file_md5sum=$(echo "${file}" | awk '{print $1}')
    file_size=$(echo "${file}" | awk '{print $2}')
    file_name=$(echo "${file}" | awk '{print $3}')

    echo "Downloading file 'http://http.us.debian.org/debian/${repo_directory}/${file_name}'"
    wget -q "http://http.us.debian.org/debian/${repo_directory}/${file_name}"

    dl_md5sum=$(md5sum ${file_name} | awk '{print $1}')
    if [ "${file_md5sum}" = "${dl_md5sum}" ]; then
      echo "Downloaded file is valid"
    else
      echo "Downloaded file is invalid: '${file_md5sum}' != '${dl_md5sum}'"
      return 1
    fi

    # Extract the "orig" tarball, stripping the leading component from the paths
    #  so the root of the source is this directory
    if [[ $file_name == *".orig."* ]]; then
      echo "Extracting source from '${file_name}'"
      tar --strip-components=1 -xzf "${file_name}"

    # Extract any additional tarballs
    elif [[ $file_name == *".tar.xz"* ]]; then
      echo "Extracting from '${file_name}'"
      tar -xJf ${file_name}
    elif [[ $file_name == *".tar.gz"* ]]; then
      echo "Extracting from '${file_name}'"
      tar -xzf ${file_name}
    elif [[ $file_name == *".dsc" ]]; then
      # Install build dependencies
      # Reference: https://www.v13.gr/blog/?p=364
      echo "Installing build dependencies as described in '${file_name}'"
      mk-build-deps -i "${file_name}"
    fi
  done

  # Start the build and package process
  # Reference: https://wiki.debian.org/HowToPackageForDebian#Building_Debian_packages
  debuild -i -us -uc -b
}

# If we have been sourced from another file, don't run anything that follows
if [ $0 != $BASH_SOURCE ]; then
  return 0
fi

init_networking || \
  die "[ERROR] Unable to get working network connectivity within the chroot environment.  Cannot continue."

install_all_os_updates || \
  warn "[WARN] Failed to install latest updates into chrooted OS.  Some important security updates may not be applied."

install_build_depends || \
  die "[ERROR] Failed to install build dependencies.  Cannot continue."

download_kernel_source || \
  die "[ERROR] Failed to download the kernel source.  Cannot continue."

apply_local_patches || \
  die "[ERROR] Failed to apply local patches.  Cannot continue."

copy_signing_key || \
  warn "[WARN] Failed to copy the linux kernel signing key.  A new signing key will be generated."

configure_kernel || \
  die "[ERROR] Failed to configure the kernel before building.  Cannot continue."

build_kernel_package || \
  die "[ERROR] Failed to build the kernel.  Cannot continue."

#install_kernel_packages || \
#  die "[ERROR] Failed to install the built kernel packages.  Cannot continue."

build_extra_packages || \
  die "[ERROR] Failed to build the desired extra packages."

#build_dkms_packages || \
#  die "[ERROR] Failed to build the additional kernel module packages from dkms.  Cannot continue."

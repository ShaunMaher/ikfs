function warn () {
  echo "${@}"
}

function die () {
  echo "${@}" 1>&2

  echo "Starting a bash shell.  Press CTRL+d to quit."
  bash

  if [ ! "${ikfs_starttime}" = "" ]; then
    local runtime=$(( $(date +%s) - $ikfs_starttime ))
    echo "Total run time: ${runtime} seconds"
  fi
  exit 1
}

function usage () {
  echo "TODO: Write Usage information"
}

# For now, put config here.
debian_zfs_sources_url_experimental="http://http.us.debian.org/debian/dists/experimental/contrib/source/Sources.xz"
debian_zfs_sources_url_unstable="http://http.us.debian.org/debian/dists/experimental/contrib/source/Sources.xz"
ubuntu_zfs_sources_url="http://archive.ubuntu.com/ubuntu/dists/{kernel_codename}/main/source/Sources.xz"
ubuntu_nvidia_sources_url="http://archive.ubuntu.com/ubuntu/dists/{kernel_codename}/restricted/binary-amd64/Packages.xz"
ubuntu_virtualbox_sources_url="http://archive.ubuntu.com/ubuntu/dists/{kernel_codename}/multiverse/binary-amd64/Packages.xz"

# Command line argument processing
# We will try to use the same variable names and command line argument names
#  across the board so we can use this shared code for all argument processing.
# Very creative use of bash to support long argument names (not nativly
#  supported) care of Arvid Requate via
#  https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options/7680682#7680682
while getopts ":a:k:l:-:" opt; do
  case "${opt}" in
    -)
      case "${OPTARG}" in
        arch|cpu|cpu-arch|cpu_arch|os-cpu|os_cpu)
          os_cpu="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        arch=*|cpu=*|cpu-arch=*|cpu_arch=*|os-cpu=*|os_cpu=*)
          os_cpu=${OPTARG#*=}
          opt=${OPTARG%=$os_cpu}
          ;;
        osname|os-name|os_name)
          os_name="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        osname=*|os-name=*|os_name=*)
          os_name=${OPTARG#*=}
          opt=${OPTARG%=$os_name}
          ;;
        oscodename|os-codename|os_codename)
          os_codename="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        oscodename=*|os-codename=*|os_codename=*)
          os_codename=${OPTARG#*=}
          opt=${OPTARG%=$os_codename}
          ;;
        kernelcodename|kernel-codename|kernel_codename)
          kernel_codename="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        kernelcodename=*|kernel-codename=*|kernel_codename=*)
          kernel_codename=${OPTARG#*=}
          opt=${OPTARG%=$kernel_codename}
          ;;
        kernelgitbranch|kernel-git-branch|kernel_git_branch)
          kernel_git_branch="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        kernelgitbranch=*|kernel-git-branch=*|kernel_git_branch=*)
          kernel_git_branch=${OPTARG#*=}
          opt=${OPTARG%=$kernel_git_branch}
          ;;
        kernelnamesuffix|kernel-name-suffix|kernel_name_suffix)
          kernel_name_suffix="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        kernelnamesuffix=*|kernel-name-suffix=*|kernel_name_suffix=*)
          kernel_name_suffix=${OPTARG#*=}
          opt=${OPTARG%=$kernel_name_suffix}
          ;;
        kernelbuildersname|kernel-builders-name|kernel_builders_name|kernelbuildername|kernel-builder-name|kernel_builder_name)
          kernel_builders_name="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        kernelbuildersname=*|kernel-builders-name=*|kernel_builders_name=*|kernelbuildername=*|kernel-builder-name=*|kernel_builder_name=*)
          kernel_builders_name=${OPTARG#*=}
          opt=${OPTARG%=$kernel_builders_name}
          ;;
        log|log-file|log_file)
          logfile="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        log=*|log-file=*|log_file=*)
          logfile=${OPTARG#*=}
          opt=${OPTARG%=$logfile}
          ;;
        help|usage)
          usage
          exit 0
          ;;
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}" >&2
          fi
          ;;
      esac
      ;;
    a)
      os_cpu="${OPTARG}"
      ;;
    k)
      kernel_codename="${OPTARG}"
      ;;
    l)
      logfile="${OPTARG}"
      ;;
    *)
      if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
        echo "Non-option argument: '-${OPTARG}'" >&2
      fi
      ;;
  esac
done

# Turn x68_64 into amd64, etc.
case "${os_cpu}" in
  x86|i386)
    os_cpu="x86"
    os_cpu_alt_name="i386"
    ;;
  x86_64|amd64)
    os_cpu="x86_64"
    os_cpu_alt_name="amd64"
    ;;
  arm64|aarch64)
    os_cpu="aarch64"
    os_cpu_alt_name="arm64"
    ;;
esac
